{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.13", "generated_at": "2025-10-01T11:31:03.276479Z", "invocation_id": "5552d067-e121-4248-be38-d0a86c49b21a", "invocation_started_at": "2025-10-01T11:31:02.434239Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-01T11:31:03.076456Z", "completed_at": "2025-10-01T11:31:03.085677Z"}, {"name": "execute", "started_at": "2025-10-01T11:31:03.086091Z", "completed_at": "2025-10-01T11:31:03.155122Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08035659790039062, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.zwift_scout.stg_riders", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from raw.zr_raw.riders\n),\n\n-- Get most recent load for each rider\nmost_recent as (\n    select\n        rider_id,\n        max(_dlt_load_id) as latest_load_id\n    from source\n    group by rider_id\n),\n\n-- Filter to only most recent records\nlatest_records as (\n    select s.*\n    from source s\n    inner join most_recent mr\n        on s.rider_id = mr.rider_id\n        and s._dlt_load_id = mr.latest_load_id\n),\n\nrenamed as (\n    select\n        -- Identity\n        rider_id,\n        name,\n        gender,\n        country,\n        age,\n        height,\n        coalesce(weight, weight__v_double)::float as weight,\n\n        -- Category & FTP\n        zp_category,\n        zp_ftp,\n\n        -- Power watts/kg - renamed from power__wkg[duration]\n        power__wkg5::float as watts_kg_5s,\n        power__wkg15::float as watts_kg_15s,\n        power__wkg30::float as watts_kg_30s,\n        power__wkg60::float as watts_kg_60s,\n        power__wkg120::float as watts_kg_120s,\n        power__wkg300::float as watts_kg_300s,\n        power__wkg1200::float as watts_kg_1200s,\n\n        -- Power watts - renamed from power__w[duration]\n        power__w5::float as watts_5s,\n        power__w15::float as watts_15s,\n        power__w30::float as watts_30s,\n        power__w60::float as watts_60s,\n        power__w120::float as watts_120s,\n        power__w300::float as watts_300s,\n        power__w1200::float as watts_1200s,\n\n        -- Power analysis\n        power__cp::float as critical_power,\n        power__awc::float as anaerobic_work_capacity,\n        power__compound_score::float as compound_score,\n        power__power_rating::float as power_rating,\n\n        -- Race data - last\n        race__last__rating::float as last_rating,\n        race__last__date::bigint as last_date,\n        race__last__mixed__category as last_mixed_category,\n        race__last__mixed__number::int as last_mixed_number,\n\n        -- Race data - current\n        race__current__rating::float as current_rating,\n        race__current__date::bigint as current_date,\n        race__current__mixed__category as current_mixed_category,\n        race__current__mixed__number::int as current_mixed_number,\n\n        -- Race data - max30\n        race__max30__rating::float as max30_rating,\n        race__max30__date::bigint as max30_date,\n        race__max30__expires::bigint as max30_expires,\n        race__max30__mixed__category as max30_mixed_category,\n        race__max30__mixed__number::int as max30_mixed_number,\n\n        -- Race data - max90\n        race__max90__rating::float as max90_rating,\n        race__max90__date::bigint as max90_date,\n        race__max90__expires::bigint as max90_expires,\n        race__max90__mixed__category as max90_mixed_category,\n        race__max90__mixed__number::int as max90_mixed_number,\n\n        -- Race statistics\n        race__finishes::int as finishes,\n        race__dnfs::int as dnfs,\n        race__wins::int as wins,\n        race__podiums::int as podiums,\n\n        -- Handicaps\n        handicaps__profile__flat::float as handicap_flat,\n        handicaps__profile__rolling::float as handicap_rolling,\n        handicaps__profile__hilly::float as handicap_hilly,\n        handicaps__profile__mountainous::float as handicap_mountainous,\n\n        -- Phenotype scores\n        phenotype__scores__sprinter::float as sprinter_score,\n        phenotype__scores__puncheur::float as puncheur_score,\n        phenotype__scores__pursuiter::float as pursuiter_score,\n        phenotype__scores__climber::float as climber_score,\n        phenotype__scores__tt::float as tt_score,\n        phenotype__value as phenotype,\n        phenotype__bias::float as phenotype_bias,\n\n        -- Club\n        club__id::int as club_id,\n        club__name as club_name,\n\n        -- DLT metadata\n        _dlt_load_id,\n        _dlt_id\n\n    from latest_records\n)\n\nselect * from renamed", "relation_name": "\"analytics\".\"main_staging\".\"stg_riders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-01T11:31:03.159935Z", "completed_at": "2025-10-01T11:31:03.162072Z"}, {"name": "execute", "started_at": "2025-10-01T11:31:03.162331Z", "completed_at": "2025-10-01T11:31:03.193619Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03517651557922363, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.zwift_scout.int_riders", "compiled": true, "compiled_code": "\n\nwith staged as (\n    select * from \"analytics\".\"main_staging\".\"stg_riders\"\n),\n\ntransformed as (\n    select\n        *,\n\n        -- Convert _dlt_load_id to human-readable timestamp\n        -- _dlt_load_id format is Unix timestamp with microseconds (e.g., 1759308455.704154)\n        to_timestamp(cast(split_part(_dlt_load_id, '.', 1) as bigint)) as loaded_at,\n\n        -- Calculate FTP per kg\n        case\n            when weight > 0 then round(zp_ftp / weight, 2)\n            else null\n        end as ftp_per_kg,\n\n        -- Convert race dates from Unix timestamp to timestamp\n        to_timestamp(last_date) as last_race_at,\n        to_timestamp(current_date) as current_race_at,\n        to_timestamp(max30_date) as max30_race_at,\n        to_timestamp(max30_expires) as max30_expires_at,\n        to_timestamp(max90_date) as max90_race_at,\n        to_timestamp(max90_expires) as max90_expires_at,\n\n        -- Calculate win rate\n        case\n            when finishes > 0 then round((wins::float / finishes) * 100, 2)\n            else 0\n        end as win_rate_pct,\n\n        -- Calculate podium rate\n        case\n            when finishes > 0 then round((podiums::float / finishes) * 100, 2)\n            else 0\n        end as podium_rate_pct,\n\n        -- Calculate DNF rate\n        case\n            when (finishes + dnfs) > 0 then round((dnfs::float / (finishes + dnfs)) * 100, 2)\n            else 0\n        end as dnf_rate_pct\n\n    from staged\n)\n\nselect * from transformed", "relation_name": "\"analytics\".\"main_intermediate\".\"int_riders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-01T11:31:03.197710Z", "completed_at": "2025-10-01T11:31:03.200023Z"}, {"name": "execute", "started_at": "2025-10-01T11:31:03.200278Z", "completed_at": "2025-10-01T11:31:03.268450Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07248234748840332, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.zwift_scout.riders", "compiled": true, "compiled_code": "\n\nwith intermediate as (\n    select * from \"analytics\".\"main_intermediate\".\"int_riders\"\n),\n\nfinal as (\n    select\n        -- Identity\n        rider_id,\n        name,\n        gender,\n        country,\n        age,\n        height,\n        weight,\n\n        -- Category & Performance\n        zp_category as category,\n        zp_ftp as ftp,\n        ftp_per_kg,\n\n        -- Key power metrics (most commonly used)\n        watts_kg_5s,\n        watts_kg_60s,\n        watts_kg_300s,\n        watts_5s,\n        watts_60s,\n        watts_300s,\n        critical_power,\n        power_rating,\n\n        -- Current racing status\n        current_rating,\n        current_race_at,\n        current_mixed_category,\n        current_mixed_number,\n\n        -- 30-day peak performance\n        max30_rating,\n        max30_race_at,\n        max30_expires_at,\n\n        -- Race statistics\n        finishes,\n        dnfs,\n        wins,\n        podiums,\n        win_rate_pct,\n        podium_rate_pct,\n        dnf_rate_pct,\n\n        -- Rider type\n        phenotype as rider_type,\n        phenotype_bias,\n        sprinter_score,\n        puncheur_score,\n        pursuiter_score,\n        climber_score,\n        tt_score,\n\n        -- Terrain strengths\n        handicap_flat,\n        handicap_rolling,\n        handicap_hilly,\n        handicap_mountainous,\n\n        -- Club\n        club_id,\n        club_name,\n\n        -- Metadata\n        loaded_at,\n        _dlt_id as record_id\n\n    from intermediate\n)\n\nselect * from final", "relation_name": "\"analytics\".\"main_core\".\"riders\"", "batch_results": null}], "elapsed_time": 0.36588501930236816, "args": {"log_level": "info", "populate_cache": true, "show_resource_report": false, "strict_mode": false, "defer": false, "partial_parse": true, "use_fast_test_edges": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "require_all_warnings_handled_by_warn_error": false, "cache_selected_only": false, "quiet": false, "empty": false, "which": "run", "introspect": true, "indirect_selection": "eager", "require_nested_cumulative_type_params": false, "write_json": true, "require_generic_test_arguments_property": true, "require_batched_execution_for_custom_microbatch_strategy": false, "log_format_file": "debug", "log_file_max_bytes": 10485760, "source_freshness_run_project_hooks": true, "upload_to_artifacts_ingest_api": false, "invocation_command": "dbt run --profiles-dir .", "select": [], "use_colors": true, "require_yaml_configuration_for_mf_time_spines": false, "version_check": true, "exclude": [], "partial_parse_file_diff": true, "show_all_deprecations": false, "use_colors_file": true, "favor_state": false, "macro_debugging": false, "profiles_dir": ".", "require_resource_names_without_spaces": true, "vars": {}, "static_parser": true, "print": true, "log_format": "default", "state_modified_compare_vars": false, "project_dir": "/home/robgriffin247/vibe_code/zwift_scout/dbt_project", "require_explicit_package_overrides_for_builtin_materializations": true, "send_anonymous_usage_stats": true, "validate_macro_args": false, "log_path": "/home/robgriffin247/vibe_code/zwift_scout/dbt_project/logs", "log_level_file": "debug", "skip_nodes_if_on_run_start_fails": false, "state_modified_compare_more_unrendered_values": false, "printer_width": 80}}